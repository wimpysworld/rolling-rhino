#!/usr/bin/env bash

function usage () {
  echo
  echo "Usage"
  echo "  $0"
  echo
}

function fancy_message() {
    # $1 = type , $2 = message
    # Message types
    # 0 - info
    # 1 - warning
    # 2 - error
    if [ -z "${1}" ] || [ -z "${2}" ]; then
      return
    fi

    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RESET="\e[0m"
    local MESSAGE_TYPE=""
    local MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"
    
    case ${MESSAGE_TYPE} in
      info) echo -e "  [${GREEN}+${RESET}] INFO: ${MESSAGE}";; # Previously "0"
      warn) echo -e "  [${YELLOW}*${RESET}] WARNING: ${MESSAGE}";; # Previously "1"
      error) echo -e "  [${RED}!${RESET}] ERROR: ${MESSAGE}";; # Previously "2"
      *) echo -e "  [?] UNKNOWN: ${MESSAGE}";;
    esac
}

# Take a zfs snapshot if zfs on root
function take_zfs_snapshots() {
	ZFS_INSTALLED=$(dpkg-query --show --showformat='${db:Status-Status}\n' 'zfsutils-linux' 2>&1)
	ZSYS_INSTALLED=$(dpkg-query --show --showformat='${db:Status-Status}\n' 'zsys' 2>&1)

	if [[ $ZFS_INSTALLED == installed && $ZSYS_INSTALLED == installed ]]
	then
		echo ""
		fancy_message info "ZFS on root detected.  Taking a snapshot before making any changes:"
		zsysctl state save
		echo ""
	fi
}

echo "Rolling Rhino 🦏"

# Check if the user running the script is root
if [ "$(id -u)" -ne 0 ]; then
  fancy_message error "You need to be root."
  exit 1
fi

# Take command line arguments
while [ $# -gt 0 ]; do
  case "${1}" in
    -h|--h|-help|--help)
      usage
      exit 0;;
    *)
      fancy_message error "\"${1}\" is not a supported parameter."
      usage
      exit 1;;
  esac
done


if which lsb_release 1>/dev/null; then
  fancy_message info "lsb_release detected."
else
  fancy_message error "lsb_release not detected. Quitting."
  exit 1
fi

if grep -q devel /etc/apt/sources.list; then
  fancy_message error "Already tracking the devel series. Nothing to do."
  exit 1
fi

OS_CODENAME=$(lsb_release --codename --short)
OS_ID=$(lsb_release --id --short)
if [ "${OS_ID}" == "Ubuntu" ]; then
  fancy_message info "Ubuntu detected."
else
  fancy_message error "${OS_ID} detected, which is not supported."
  exit 1
fi

OS_DESCRIPTION=$(lsb_release --description --short)
if [[ "${OS_DESCRIPTION}" == *"development branch"* ]]; then
  fancy_message info "${OS_DESCRIPTION} detected."
elif  [[ "${OS_DESCRIPTION}" == *"LTS"* ]]; then
  fancy_message error "${OS_DESCRIPTION} detected. Switching a LTS release to the devel series directly is not supported."
  exit 1
else
  fancy_message error "${OS_DESCRIPTION} detected. Switching an interim release to the devel series directly is not supported."
  exit 1
fi

DESKTOP_FOUND=0
for META in kubuntu-desktop lubuntu-desktop ubuntu-desktop ubuntu-budgie-desktop ubuntukylin-desktop ubuntu-mate-desktop ubuntustudio-desktop xubuntu-desktop ubuntu-wsl; do
  INSTALLED=$(env LANG=C apt list --installed "${META}" 2>/dev/null | grep installed)

  if [ -n "${INSTALLED}" ]; then
    fancy_message info "Detected ${META}."
    DESKTOP_FOUND=1
    break
  fi
done

if [ ${DESKTOP_FOUND} -eq 0 ]; then
  fancy_message error "No installed desktop packages were detected. Quitting."
  exit 1
fi

if [ -z "$(ls -A /etc/apt/sources.list.d/*.list 2>/dev/null)" ]; then
  fancy_message info "No PPAs detected, this is good."
else
  fancy_message warn "PPAs detected, you're responsible for taking care of PPA migrations in the future."
fi

fancy_message info "All checks passed."
read -p "Are you sure you want to start tracking the devel series? [y/N]" -n 1 -r

if [[ ${REPLY} =~ ^[Yy]$ ]]; then

    take_zfs_snapshots  
    
    HOST_ARCH="$(uname --machine)"
    if [ "${HOST_ARCH}" == "x86_64" ]; then
      ARCHIVE="http://archive.ubuntu.com/ubuntu"
      SEC_ARCHIVE="http://security.ubuntu.com/ubuntu"
    else
      ARCHIVE="http://ports.ubuntu.com/ubuntu-ports"
      SEC_ARCHIVE="http://ports.ubuntu.com/ubuntu-ports"
    fi
    
    cp  /etc/apt/sources.list /etc/apt/sources.list.${OS_CODENAME}
    cat << EOF > /etc/apt/sources.list
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb ${ARCHIVE} devel main restricted
# deb-src ${ARCHIVE} devel main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb ${ARCHIVE} devel-updates main restricted
# deb-src ${ARCHIVE} devel-updates main restricted

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb ${ARCHIVE} devel universe
# deb-src ${ARCHIVE} devel universe
deb ${ARCHIVE} devel-updates universe
# deb-src ${ARCHIVE} devel-updates universe

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb ${ARCHIVE} devel multiverse
# deb-src ${ARCHIVE} devel multiverse
deb ${ARCHIVE} devel-updates multiverse
# deb-src ${ARCHIVE} devel-updates multiverse

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb ${ARCHIVE} devel-backports main restricted universe multiverse
# deb-src ${ARCHIVE} devel-backports main restricted universe multiverse

## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu devel partner
# deb-src http://archive.canonical.com/ubuntu devel partner

deb ${SEC_ARCHIVE} devel-security main restricted
# deb-src ${SEC_ARCHIVE} devel-security main restricted
deb ${SEC_ARCHIVE} devel-security universe
# deb-src ${SEC_ARCHIVE} devel-security universe
deb ${SEC_ARCHIVE} devel-security multiverse
# deb-src ${SEC_ARCHIVE} devel-security multiverse
EOF

    fancy_message info "Switching to devel series."
    apt -y autoclean
    apt -y clean
    apt -y update
    apt -y dist-upgrade
    apt -y autoremove
    fancy_message info "Your Rolling Rhino is ready."

    cat "$(dirname "$0")/logo.txt"
fi
